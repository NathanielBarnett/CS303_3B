Big-O Analysis:

MorseTree::decode()
-> This function has O(Nlg(N)) worst-cased runtime, where N is the number of characters in the input string. This function traverses the tree in search of the node with the corresponding coded letter, or path of dots and dashes, and then outputs the actual letter. On average, this function should run about O(lg(N)) since the tree shoud remain relatively balanced. Since the current implementation and requirements for this function necessitate the use of a tree, the function runtime cannot be improved.

MorseTree::encode()
-> This function has O(N), where N is the number of letters in the input string. This function essentially just outputs the value associated with each letter, or key, that is given in the input string. When the key is known, returning the value associated with that key in a map data structure is O(1), and since this function performs that process for every character in the input string, the analysis comes out to be O(N). When wanting to encode a word or phrase, every character must be encoded, therefore, this functio cannot be improved.

MorseTree::buildBinaryTree()
-> This function takes in two strings, a letter and the corresponding codded letter. It then traverses the tree to find the path and location that a letter and coded letter ought to be positioned, and if available, it makes the addition to the tree. This function performs with a O(Nlg(N)) due to the fact that it must loop at most N times, where N is the number of dots and dashes in the coded letter. Since the tree must be traversed in order to find the location to insert the new node, this function cannot be improved. 
